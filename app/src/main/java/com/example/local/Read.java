/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.local;

import org.apache.hadoop.conf.Configuration;
import org.apache.iceberg.*;
import org.apache.iceberg.catalog.Catalog;
import org.apache.iceberg.catalog.TableIdentifier;
import org.apache.iceberg.data.IcebergGenerics;
import org.apache.iceberg.data.Record;
import org.apache.iceberg.io.CloseableIterable;
import org.apache.iceberg.jdbc.JdbcCatalog;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class Read {

    /**
     *  Data returned as "Record(John, null)" != written data i.e "Record(1, John)".
     * @param args
     * @throws IOException
     *
     * catalog-warehouse:
     * catalog-warehouse ADASARI$ tree .
     * .
     * └── local
     *     └── test_table
     *         └── metadata
     *             ├── 00000-e1544e9c-5c7a-4ba9-8f69-80bad72ca8ef.metadata.json
     *             ├── 00001-3de9d3f0-ae4b-4fa5-91e6-d49b6e4b6928.metadata.json
     *             ├── f1674d1c-0a22-4fd7-a0ca-9ab01220ee4d-m0.avro
     *             └── snap-1640934154524133913-1-f1674d1c-0a22-4fd7-a0ca-9ab01220ee4d.avro
     *
     * 4 directories, 4 files
     */
    public static void main(String[] args) throws IOException {
        // JDBC Catalog configuration
        Map<String, String> catalogProperties = new HashMap<>();
        catalogProperties.put(CatalogProperties.CATALOG_IMPL, JdbcCatalog.class.getName());
        catalogProperties.put(CatalogProperties.URI, "jdbc:sqlite:file:/Users/ADASARI/work/learning/iceberg/catalog/catalog-db-local.db");
        catalogProperties.put(CatalogProperties.WAREHOUSE_LOCATION, "file:///Users/ADASARI/work/learning/iceberg/catalog-warehouse");

        // Create a Catalog instance
        Configuration hadoopConfig = new Configuration();
        Catalog catalog = CatalogUtil.buildIcebergCatalog("test_local_warehouse", catalogProperties, hadoopConfig);

        // Define the table identifier (e.g., "namespace"."table_name")
        TableIdentifier tableIdentifier = TableIdentifier.of("local", "test_table");

        // Load the table from the catalog
        Table table = catalog.loadTable(tableIdentifier);

        try (CloseableIterable<Record> records = IcebergGenerics.read(table).build()) {
            for (Record record : records) {
                System.out.println(record);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        TableScan scan = table.newScan();
        CloseableIterable<FileScanTask> tasks = scan.planFiles();

        for (FileScanTask task : tasks) {
            DataFile dataFile = task.file();
            System.out.println("Data file path: " + dataFile.path());
        }
    }
}
